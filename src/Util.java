package src;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;

/**
 * This class provides with methods to read and write into a CSV file and generate the PNR number for a booking.
 */
public final class Util {
    /**
     *
     * @param filename the path to the CSV file that is to be read.
     * @param noOfFields the number of columns in the table of the CSV file.
     * @return list of list of string where each entry represents a field in the table.
     */
    public static ArrayList<String[]> readRecords(String filename, int noOfFields) {
        ArrayList<String[]> records = new ArrayList<String[]>();
        try {
            FileReader fileReader = new FileReader(filename);
            CSVReader csvReader = new CSVReader(fileReader, ',', '\'', 1);
            String[] nextRecord;
            while((nextRecord = csvReader.readNext()) != null) {
                if (nextRecord.length == noOfFields) {
                    records.add(nextRecord);
                }
            }
        }
        catch(Exception e) {
            System.out.println(filename);
            e.printStackTrace();
        }
        if(records == null) {
            throw new RuntimeException(filename+" does not contain any records.");
        }
        return records;
    }

    /**
     *
     * @param records the list of list of Strings representing the table that is to be written in CSV format.
     * @param filename the path to the CSV file to which the text is to be written.
     */
    public static void writeRecords(ArrayList<String[]> records,String filename) {
        try{
            FileWriter fileWriter=new FileWriter(filename);
            CSVWriter writer=new CSVWriter(fileWriter, CSVWriter.DEFAULT_SEPARATOR, CSVWriter.NO_QUOTE_CHARACTER);
            for(String[]record:records){
                writer.writeNext(record);
            }
            writer.close();
        }
        catch(Exception e) {
            System.out.println(filename);
            e.printStackTrace();
        }
    }

    /**
     * The PNR number uniquely identifies a booking.
     * The format of the PNR number is flightNumber(2 digits)-source(1 character)-destination(1 character)-seat(2 digits).
     * @param flightNumber uniquely identifies the flight. It can range from 0 to 99.
     *                     If it comprises of a single digit(0 to 9) a 0 is added to the left.
     * @param seat the seat number in the flight. It ranges from 0 to maximum seating capacity - 1.
     *             The maximum seating capacity of any flight will always be less than 100.
     *             So the value of seat lies in the range of 0 to 99.
     *             If it comprises of a single digit(0 to 9) a 0 is added to the left.
     * @param source the source airport of the flight. It can take value from A to Z.
     * @param destination the destination airport of the flight. It can take value from A to Z.
     * @return a 6 character String(PNR) generated by concatenating flightNumber, source, destination and seat.
     * The flight number and seat are sufficient to uniquely identify a booking.The source and destination are
     * added to provide more meaning to the number.
     */
    public static String generatePNR(String flightNumber,String seat,String source, String destination) {
        if(flightNumber.length() == 1) {
            flightNumber = "0" + flightNumber;
        }
        if(seat.length() == 1) {
            seat = "0" + seat;
        }
        return flightNumber + source + destination + seat;
    }
}
